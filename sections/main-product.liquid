<!-- Import des fichiers CSS et reutilisation de class du Themes -->
<section
  id="MainProduct-{{ section.id }}"
  class="custom-page-width"
  data-section="{{ section.id }}"
  >
  {{ 'section-main-product.css' | asset_url | stylesheet_tag }}
  {{ 'component-price.css' | asset_url | stylesheet_tag }}
  {{ 'custom-product-info.css' | asset_url | stylesheet_tag }}
  {{ 'custom-accordion.css' | asset_url | stylesheet_tag }}

  {%- style -%}
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}
      px;
      padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}
      px;
    }

    @media screen and (min-width: 750px) {
      .section-{{ section.id }}-padding {
        padding-top: {{ section.settings.padding_top }}
        px;
        padding-bottom: {{ section.settings.padding_bottom }}
        px;
      }
    }

    .custom-grid-item {
      width: 100%;
      flex-grow: 1;
    }

    @media screen and (min-width: 450px) {
      .custom-grid-item {
        width: 50%;
        min-width: 257px;
        max-width: 497px;
      }
    }

    @media screen and (min-width: 990px) {
      .custom-grid-item {
        width: 497px;
        display: flex;
        flex-direction: column;
        justify-content: center;
      }
    }

    .custom-page-width {
      margin: 0 auto;
      padding: 0 1.5rem;
    }

    @media screen and (min-width: 750px) {
      .custom-page-width {
        padding: 0 64px;
      }
    }
    .custom-subtitle {
      font-weight: 600;
      font-size: 12px;
      line-height: 15px;
      margin-top: 14px;
      text-transform: uppercase;
      padding: 0;
      color: #2F2F2F;
    }

    .custom-btn-wrapper {
      margin: 32px 0;
    }

  {%- endstyle -%}

  <!-- Import des fichiers JS -->
  <script src="{{ 'product-info.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'custom-accordion.js' | asset_url }}" defer="defer"></script>
  <link rel="stylesheet" href="style.css">
  <!-- Import de fancybox JS -->
  <script src="https://cdn.jsdelivr.net/npm/@fancyapps/ui@5.0/dist/fancybox/fancybox.umd.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/ui@5.0/dist/fancybox/fancybox.css" />
  <!-- Import de axios -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <div class="product product--large custom-grid custom-product-wrapper">
    <!-- Snippet pour la gallerie photo -->
    {% render 'custom-product-gallery' %}
    <!-- Reste du code pour les informations concernant le produit -->
    <div class="custom-grid-item">

      <!-- Reutilisation du webcomponents avec l'utilisation d'une nouvelle classe pour l'effet sticky -->
      <product-info
        id="ProductInfo-{{ section.id }}"
        data-section="{{ section.id }}"
        data-url="{{ product.url }}"
        class="custom-section-sticky">
        <!-- Form ID de cette section -->
        {%- assign product_form_id = 'product-form-' | append: section.id -%}

        {%- for block in section.blocks -%}
          {%- case block.type -%}

            <!-- Customization du block pour le titre avec le coeur  -->
            {%- when 'title' -%}
            <div class="custom-title-container">
              <h1 class="custom-title">{{ product.title | split: '-' | last }}</h1>
              {% render 'icon-custom-heart' %}
            </div>

            <!-- Customization du block pour le subtitle  -->
            {%- when 'subtitle' -%}
            <p class="custom-subtitle">
              {{- product.title | split: '-' | first -}}
            </p>

            <!-- Snippet pour montrer le prix  -->
            {%- when 'price' -%}
            <div id="price-{{ section.id }}">
              <!-- Passe l'object product en params pour la reusabilité  -->
              {%- render 'custom-price', product: product -%}
            </div>

            <!-- Section pour l'onglet depliant -->
              {%- when 'collapsible_tab' -%}
                <div class="coll-box" aria-expanded="false">
                  <div class="coll-box-header">
                    <!-- Si l'utilisateur selectionne de montrer la description sur cet onglet?
                     description en titre et description en texte  -->
                    <!-- Sinon, on affiche le contenu de son input en titre et en texte  -->
                    {% if block.settings.product_description == true %}
                      <h3>Description</h3>
                    {% else %}
                      <h3>{{ block.settings.heading | default: block.settings.page.title }}</h3>
                    {% endif %}
                    {% render 'icon-custom-chevron-down' %}
                  </div>
                  <div class="coll-box-text">
                    {% if block.settings.product_description == true %}
                      <p>{{ product.description }}</p>
                    {% else %}
                      <p>{{ block.settings.content }} {{ block.settings.page.content }}</p>
                    {% endif %}
                  </div>
                </div>

              <!-- Je n'ai pas modifié le quantity_selector par manque de temps et d'experience -->
            {%- when 'quantity_selector' -%}
            {% render 'custom-qty-selector', product: product, product_form_id: product_form_id, section_id: section.id %}

            <!-- Section pour le variant selector -->
            {%- when 'variant_picker' -%}
            <!-- Seulement si le produit contient des options -->
            {%- unless product.has_only_default_variant -%}
            <!-- Snippet du variant picker + liens vers guides des tailles en y passant l'objet produit et l'id du formulaire -->
            {% render 'custom-product-variant-picker', product: product, product_form_id: product_form_id %}
           {%- endunless -%}

            <!-- Section pour le bouton d'ajout au panier et de reservation en boutique -->
            {%- when 'buy_buttons' -%}
            <div class="custom-btn-wrapper">
              {%- render 'custom-buy-buttons', product: product, product_form_id: product_form_id, section_id: section.id -%}
              <!-- Si la checkbox pickup_in_store est selectionnée montre le bouton réserver en boutique -->
              {% if block.settings.pickup_in_store %}
                <button class="pickup-btn" aria-label="Réserver en boutique">
                  {% render 'icon-custom-store' %}
                  <span>Réserver en boutique</span>
                </button>
              {% endif %}
            </div>
          {% endcase %}
        {%- endfor -%}
      </product-info>
    </div>
  </div>

  <!-- Bouton back to top fixed au bas droite de la page -->
  {% comment %} {% render 'custom-back-to-top-btn' %} {% endcomment %}
</section>

<!-- Script pour le variant picker -->
<script>
  $(document).ready( () => {
    // Récupère les données du produit
    const variantData = JSON.parse($('[data-section="{{section.id}}"] script[type="application/json"]').html());
    // Récupère le div qui contient les prix
    const priceLabel = $("div#price-label-{{section.id}}");
    // Récupère les prix
    const regPrice = priceLabel.find("#custom-reg-price");
    const compPrice = priceLabel.find("#custom-comp-price");
    // Récupère le badge de promo
    const saleBadge = priceLabel.find("#custom-disc-badge");
    // Récupère le bouton d'ajout au panier
    const atcBtn = $('#ProductSubmitButton-{{section.id}}');
    // Récupère le prix du bouton d'ajout au panier
    const atcPrice = atcBtn.find('#custom-atc-price');
    // Récupère les valeurs des options selectionnées
    let curr_option_1 = $('fieldset[data-option="option-2"] input[checked]')[0]?.value ?? null;
    let curr_option_2 = $('fieldset[data-option="option-1"] input:checked')[0]?.value ?? null;
    let curr_option_3 = $('fieldset[data-option="option-3"] input[checked]')[0]?.value ?? null;

    // Fonction qui trouve la variante actuelle et retourne un objet avec les infos de la variante
    const findCurrentVariant = (curr_option_1, curr_option_2, curr_option_3) => {
      const variant = variantData.find((variant) => {
        return(variant.option1 === curr_option_1 && variant.option2 === curr_option_2 && variant.option3 === curr_option_3);
      });

      const curr_variant = {
        id: variant.id,
        price: variant.price,
        compare_at_price: variant.compare_at_price,
        available: variant.available,
        qtyRule: variant.qtyInputAtt,
      };

      return curr_variant;
    };

    // Fonction qui met à jour les tailles disponibles
    const updateSizeOptions = () => {
      const allCurrentSizes = $('fieldset[data-option="option-2"] input');
      allCurrentSizes.each((index, sizeInput)=>{
        const $sizeInput = $(sizeInput);
        const sizeValue = $sizeInput.val();
        const sizeVariant = findCurrentVariant(sizeValue, curr_option_2, curr_option_3);
        if(!sizeVariant.available){
          $sizeInput.attr('disabled', true);
        } else {
          $sizeInput.attr('disabled', false);
        }
      });
    }

    // Récupère la variante actuelle
    let curr_variant = findCurrentVariant(curr_option_1, curr_option_2, curr_option_3);
    //On mount, on récupère toutes les tailles pour disable les valeurs non disponibles
    updateSizeOptions();

    // Récupère le variant selector
    const variantPicker = $('variant-radios[data-section="{{section.id}}"] fieldset');

    // Pour chaque option du variant selector
    variantPicker.each((index, elem) => {
      const $elem = $(elem);
      // Récupère l'input avec la valeur de l'option
      const $input = $elem.find("input");

      // Ecoute les changements d'option
      $input.on("change", function() {
        // Récupère la valeur de l'option
        const var_val = $(this).val();
        const option = $elem.data("option");

        // Met à jour la valeur de l'option, inversé pour prendre en compte les options inversées
        if (option === "option-2") {
          curr_option_1 = var_val;
        } else if (option === "option-1") {
          curr_option_2 = var_val;
        } else if (option === "option-3") {
          curr_option_3 = var_val;
        }

        // Si l'option est la taille, on récupère toutes les tailles pour disable les valeurs non disponibles
        if (option === "option-1") {
          updateSizeOptions();
        }

        // Récupère la variante actuelle
        curr_variant = findCurrentVariant(curr_option_1, curr_option_2, curr_option_3);

        // Si la variante n'est pas disponible disable le bouton d'ajout au panier
        if (!curr_variant.available) {
          atcBtn.attr("disabled", true);
        } else {
          atcBtn.attr("disabled", false);
        }

        // Formate les prix
        const price = curr_variant.price / 100;
        const compare_at_price = curr_variant.compare_at_price / 100;

        // Ajoute la devise et supprime les centimes si ils sont à 0
        let formattedPrice = new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(price);
        if (formattedPrice.split(',')[1].includes('00')) {
          formattedPrice = formattedPrice.split(',')[0] + ' €';
          }
          
        let formattedCompareAtPrice = new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(compare_at_price);
        if (formattedCompareAtPrice.split(',')[1].includes('00')) {
          formattedCompareAtPrice = formattedCompareAtPrice.split(',')[0] + ' €';
          }

        // Est-ce que le produit est en promo ?
        let onSale = compare_at_price > price;

        let discount;

        // Si le produit est en promo, calcul le pourcentage de réduction
        // Arrondi à l'entier le plus proche
        if (onSale) {
          discount = Math.round(((compare_at_price - price) / compare_at_price) * 100) + '%';
        }
 
        // Affiche les nouvelles valeurs pour le prix et le badge de promo
          regPrice.text(formattedPrice);
          compPrice.text(formattedCompareAtPrice);
          atcPrice.text(formattedPrice);
          saleBadge.text(discount);
      });

    });

    const getQty = () => {
      // On recupère le champs de saisie de la quantité
      let qtyInput = $('.custom-qty-input-{{section.id}}');
      let currentQty;
      // Si est null, on assigne 1 a la variable currentQty
      if (qtyInput === null) {
        currentQty = 1;
      // Sinon on assigne la valeur du champs de saisie
      } else {
        currentQty = qtyInput.val();
      }
      return currentQty;
    }

    //Récupère la quantité
    const currentQty = $('.custom-qty-input-{{section.id}}').val();

    //Requette ajax pour ajouter au panier avec axios
    atcBtn.on('click', async function(e) {
      e.preventDefault();
      console.log("Ajout au panier", curr_variant.id);
      const itemQty = getQty();
      await axios.post('/cart/add.js', {
        quantity: itemQty,
        id: curr_variant.id
      }).then(function (response) {
        console.log(response);
      }).catch(function (error) {
        console.log(error);
      });
      location.reload();
    });
    

  });
</script>

{% schema %}
  {
    "name": "t:sections.main-product.name",
    "tag": "section",
    "class": "section",
    "blocks": [
      {
        "type": "subtitle",
        "name": "Sous-titre"
      },
      {
        "type": "title",
        "name": "t:sections.main-product.blocks.title.name",
        "limit": 1
      },
      {
        "type": "price",
        "name": "t:sections.main-product.blocks.price.name",
        "limit": 1
      },
      {
        "type": "quantity_selector",
        "name": "t:sections.main-product.blocks.quantity_selector.name",
        "limit": 1
      }, {
        "type": "variant_picker",
        "name": "t:sections.main-product.blocks.variant_picker.name",
        "limit": 1
      }, {
        "type": "buy_buttons",
        "name": "t:sections.main-product.blocks.buy_buttons.name",
        "limit": 1,
        "settings": [
          {
            "type": "checkbox",
            "id": "show_dynamic_checkout",
            "default": true,
            "label": "t:sections.main-product.blocks.buy_buttons.settings.show_dynamic_checkout.label",
            "info": "t:sections.main-product.blocks.buy_buttons.settings.show_dynamic_checkout.info"
          }, {
            "type": "checkbox",
            "id": "pickup_in_store",
            "default": true,
            "label": "Proposez le retrait en magasin",
            "info": "Permet de proposer le retrait en magasin"
          }
        ]
      }, 
       {
        "type": "collapsible_tab",
        "name": "t:sections.main-product.blocks.collapsible_tab.name",
        "settings": [
          {
            "type": "text",
            "id": "heading",
            "default": "Collapsible row",
            "info": "t:sections.main-product.blocks.collapsible_tab.settings.heading.info",
            "label": "t:sections.main-product.blocks.collapsible_tab.settings.heading.label"
          }, {
            "type": "checkbox",
            "id": "product_description",
            "label": "Product description",
            "info": "Montrer la description du produit",
            "default": false
          }, {
            "type": "richtext",
            "id": "content",
            "label": "t:sections.main-product.blocks.collapsible_tab.settings.content.label"
          }, {
            "type": "page",
            "id": "page",
            "label": "t:sections.main-product.blocks.collapsible_tab.settings.page.label"
          }
        ]
      }
    ]
  }
{% endschema %}